#include "Equalizer.h"

#include <utility>

#include "math.h"

#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(equalizer, CONFIG_AUDIO_DATAPATH_LOG_LEVEL);

static const float a[EQ_ORDER][3] = {
    {1.000000000000000, -1.990844014663719, 0.990890061149213},
    {1.000000000000000, -1.962529035911005, 0.962907404996144},
    {1.000000000000000, -1.921473171685143, 0.925596020576637},
    {1.000000000000000, -1.544449409119988, 0.733376094554248},
    {1.000000000000000, -1.121170890228473, 0.413204978524321},
    {1.000000000000000, -1.050022035983737, 0.668501531043800},
    {1.000000000000000, -0.152825855141626, 0.462050147530658},
    {1.000000000000000, -0.500598440492308, 0.216225368070061}
};

static const float b[EQ_ORDER][3] = {
    {1.001528139184109, -1.990826096147937, 0.989379840480887},
    {0.995361463599325, -1.962529035911005, 0.967545941396819},
    {1.004539329281577, -1.921473171685143, 0.921056691295060},
    {0.926236309196037, -1.544449409119988, 0.807139785358210},
    {0.902692930993568, -1.121170890228473, 0.510512047530753},
    {0.886665275659910, -1.050022035983737, 0.781836255383889},
    {0.784692627164086, -0.152825855141626, 0.677357520366571},
    {0.671454248995156, -0.072411623830529, 0.116584302413126}
};

float eq_buffer[EQ_ORDER][2] = {0};

void reset_eq() {
    #pragma unroll
    for(int i = 0; i < EQ_ORDER; i++) {
        eq_buffer[i][0] = 0;
        eq_buffer[i][1] = 0;
    }
}

void equalize(int16_t * data, int length) {
    float y[EQ_ORDER+1] = {0};
    for (int n = 0; n < length; n+=2) {
        y[0] = data[n];

        #pragma unroll
        for (int k = 0; k < EQ_ORDER; k++) {
            y[k+1] = b[k][0] * y[k] + eq_buffer[k][0];
            eq_buffer[k][0] = b[k][1] * y[k] - a[k][1] * y[k+1] + eq_buffer[k][1];
            eq_buffer[k][1] = b[k][2] * y[k] - a[k][2] * y[k+1];
        }

        //if (abs(0.4 * y[EQ_ORDER]) > 1*(1<<15)) LOG_WRN("Clip: %f", 0.4f * y[EQ_ORDER]);

        data[n] = (int16_t) CLAMP(0.5 * y[EQ_ORDER],-1*(1<<15),1*(1<<15)-1); //-6dB
    }
}