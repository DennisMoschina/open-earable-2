#include "Equalizer.h"

#include <utility>

#include "math.h"

#include <zephyr/logging/log.h>
LOG_MODULE_REGISTER(equalizer, CONFIG_AUDIO_DATAPATH_LOG_LEVEL);

static const float a[EQ_ORDER][3] = {
    {1.000000000000000, -1.990524802287895, 0.990574578569072},
    {1.000000000000000, -1.994222538015773, 0.994345985186418},
    {1.000000000000000, -1.973615257846438, 0.974225818633841},
    {1.000000000000000, -1.130912593707734, 0.260951014940078},
    {1.000000000000000, -1.615735374338505, 0.801553742404247},
    {1.000000000000000, -1.248684935754923, 0.709309933940480},
    {1.000000000000000, -1.408819567432859, 0.775778201066992},
    {1.000000000000000, -0.588461261167589, 0.085880949982365}
};

static const float b[EQ_ORDER][3] = {
    {1.003221635054925, -1.990479546117857, 0.987398199684184},
    {1.000532897193161, -1.994222538015773, 0.993813087993257},
    {0.996776863995304, -1.973615257846438, 0.977448954638537},
    {0.892078814183313, -1.130912593707734, 0.368872200756766},
    {0.944906064048419, -1.537185285764454, 0.814942212103780},
    {0.944906064048419, -1.340740093897218, 0.780238215313454},
    {0.935165874834754, -1.408819567432859, 0.840612326232238},
    {0.864203975877540, -0.416278802046159, 0.049494514983394}
};

float eq_buffer[EQ_ORDER][2] = {0};

void reset_eq() {
    #pragma unroll
    for(int i = 0; i < EQ_ORDER; i++) {
        eq_buffer[i][0] = 0;
        eq_buffer[i][1] = 0;
    }
}

void equalize(int16_t * data, int length) {
    float y[EQ_ORDER+1] = {0};
    for (int n = 0; n < length; n+=2) {
        y[0] = data[n];

        #pragma unroll
        for (int k = 0; k < EQ_ORDER; k++) {
            y[k+1] = b[k][0] * y[k] + eq_buffer[k][0];
            eq_buffer[k][0] = b[k][1] * y[k] - a[k][1] * y[k+1] + eq_buffer[k][1];
            eq_buffer[k][1] = b[k][2] * y[k] - a[k][2] * y[k+1];
        }

        //if (abs(0.4 * y[EQ_ORDER]) > 1*(1<<15)) LOG_WRN("Clip: %f", 0.4f * y[EQ_ORDER]);

        data[n] = (int16_t) CLAMP(0.35 * y[EQ_ORDER],-1*(1<<15),1*(1<<15)-1); //-9dB
    }
}